import lib

module Impl<inStr/0 input> {
  string sections(int n, int x) { result = Helpers<input/0>::groupedLines(n, x) }

  predicate isSeed(float n) { sections(0, 0).splitAt(":", 1).trim().splitAt(" ").toFloat() = n }

  string parts(int n, int k) {
    result = sections(n + 1, 0).regexpCapture("([a-z]+)-to-([a-z]+) map:", k)
  }

  string kind() { result = parts(_, _) }

  predicate mapKind(int n, string start, string end) { start = parts(n, 1) and end = parts(n, 2) }

  float mapElem(int n, int x, int k) {
    n >= 0 and
    x >= 0 and
    result = sections(n + 1, x + 1).splitAt(" ", k).toFloat()
  }

  predicate resolvedMapping(int n, float targetStart, float sourceStart, float len) {
    exists(int x |
      targetStart = mapElem(n, x, 0) and
      sourceStart = mapElem(n, x, 1) and
      len = mapElem(n, x, 2)
    )
  }

  predicate rankedMapping(int n, int k, float targetStart, float sourceStart, float len) {
    sourceStart = rank[k](float otherStart | resolvedMapping(n, _, otherStart, _)) and
    resolvedMapping(n, targetStart, sourceStart, len)
  }

  int maxK(int n) { result = max(int k | rankedMapping(n, k, _, _, _)) }

  bindingset[source]
  predicate complexMapping(int n, float source, float target) {
    exists(float sourceStart, float len, float targetStart |
      resolvedMapping(n, targetStart, sourceStart, len) and
      source >= sourceStart and
      source < sourceStart + len and
      target = (targetStart) + (source - sourceStart)
    )
  }

  bindingset[source]
  predicate inComplexMapping(int n, float source) {
    exists(float sourceStart, int len |
      resolvedMapping(n, _, sourceStart, len) and
      source >= sourceStart and
      source < sourceStart + len
    )
  }

  bindingset[source]
  predicate mapping(string sourceName, string targetName, float source, float target) {
    exists(int n | mapKind(n, sourceName, targetName) |
      complexMapping(n, source, target)
      or
      not inComplexMapping(n, source) and
      target = source
    )
  }

  float seedPart(int n) { sections(0, 0).splitAt(":", 1).trim().splitAt(" ", n).toFloat() = result }

  predicate part(float seed, string kind, float value) {
    kind = "seed" and seed = value and isSeed(seed)
    or
    exists(string midKind, float midValue |
      part(seed, midKind, midValue) and
      mapping(midKind, kind, midValue, value)
    )
  }

  bindingset[rangeStart, rangeEnd]
  predicate mapRange(int n, float rangeStart, float rangeEnd, float newStart, float newEnd) {
    exists(float firstMappingStart |
      rankedMapping(n, 1, _, firstMappingStart, _) and
      rangeStart < firstMappingStart and
      newStart = rangeStart and
      newEnd = firstMappingStart.minimum(rangeEnd)
    )
    or
    exists(float mappingStart, float mappingLen, float mappingTarget |
      rankedMapping(n, _, mappingTarget, mappingStart, mappingLen) and
      newStart = mappingStart.maximum(rangeStart) - mappingStart + mappingTarget and
      newEnd = (mappingStart + mappingLen).minimum(rangeEnd) - mappingStart + mappingTarget and
      newEnd > newStart
    )
    or
    exists(int k, float prevLen, float prevStart, float gapStart, float gapEnd |
      rankedMapping(n, k, _, prevStart, prevLen) and
      gapStart = prevStart + prevLen and
      rankedMapping(n, k + 1, _, gapEnd, _) and
      newStart = gapStart.maximum(rangeStart) and
      newEnd = gapEnd.minimum(rangeEnd) and
      newEnd > newStart
    )
    or
    exists(float lastMappingStart, float lastMappingEnd, float lastMappingLen |
      rankedMapping(n, maxK(n), _, lastMappingStart, lastMappingLen) and
      lastMappingEnd = lastMappingStart + lastMappingLen and
      rangeEnd > lastMappingEnd and
      newEnd = rangeEnd and
      newStart = lastMappingEnd.maximum(rangeStart)
    )
  }
  
  predicate seedRange(float start, float end) {
    exists(int n |
      exists(seedPart(n)) and
      start = seedPart(2 * n) and
      end = seedPart(2 * n) + seedPart(2 * n + 1) - 1
    )
  }

  predicate partRange(string kind, float rangeStart, float rangeEnd) {
    kind = "seed" and seedRange(rangeStart, rangeEnd)
    or
    exists(string midKind, float midStart, float midEnd, int n |
      mapKind(n, midKind, kind) and
      partRange(midKind, midStart, midEnd) and
      mapRange(n, midStart, midEnd, rangeStart, rangeEnd)
    )
  }

  float minLocationP2() { result = min(float x | partRange("location", x, _)) }

  int minLocation() { result = min(int x | part(_, "location", x)) }
}

string testInput() {
  result =
    "seeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4"
}

string realInput() {
  result =
    "seeds: 2494933545 159314859 4045092792 172620202 928898138 554061882 2740120981 81327018 2031777983 63513119 2871914181 270575980 2200250633 216481794 3289604059 25147787 3472625834 10030240 260990830 232636388\n\nseed-to-soil map:\n3272284283 2724782980 1022683013\n138187491 4195038636 99928660\n2359623759 797621236 127984779\n662451929 2224466386 266466256\n928918185 714355413 83265823\n1012184008 3891516474 303522162\n3063776460 1098322140 208507823\n2194238166 1306829963 50525692\n357106588 2091837170 132629216\n2244763858 2490932642 114859901\n2050187685 3747465993 144050481\n489735804 925606015 172716125\n2487608538 138187491 576167922\n238116151 2605792543 118990437\n1315706170 1357355655 734481515\n\nsoil-to-fertilizer map:\n4265669768 2142212766 29297528\n2030756625 2171510294 69737894\n3038084234 3411621093 262803613\n2410534622 3266307064 145314029\n2667304792 2241248188 370779442\n2100494519 3921619167 310040103\n3611390334 2612027630 654279434\n2555848651 2030756625 111456141\n733063720 869238953 195075492\n3300887847 4231659270 63308026\n3364195873 3674424706 247194461\n928139212 733063720 136175233\n\nfertilizer-to-water map:\n0 772139976 154052576\n909628165 428370542 51644443\n3172969725 4109584032 185383264\n1116931128 1046566515 14194115\n223777814 10055892 255169216\n2512535520 1229983026 60386000\n3109777744 3899207072 16374329\n4030761870 3829858282 12540292\n828135093 718323602 53816374\n2358450176 2554590817 154085344\n3126152073 3152512175 46817652\n4043302162 3842398574 56808498\n3694349069 3493296400 336412801\n770911368 661099877 57223725\n3574254366 3032417472 120094703\n2689829955 2124052738 139986329\n3358352989 1925653441 3542661\n154052576 1060760630 69725238\n3460616091 3829709201 149081\n881951467 480014985 9494517\n1777535488 3915581401 135358522\n2829816284 1290369026 84715328\n478947030 489509502 171590375\n2686813330 1226966401 3016625\n3361895650 3199329827 98720441\n1226966401 1375084354 550569087\n3515610257 4050939923 58644109\n650537405 926192552 120373963\n4100110660 1929196102 194856636\n1912894010 2708676161 323741311\n3460765172 2264039067 54845085\n898932898 0 10055892\n891445984 265225108 7486914\n2914531612 3298050268 195246132\n2572921520 2318884152 113891810\n961272608 272712022 155658520\n908988790 1130485868 639375\n2236635321 2432775962 121814855\n\nwater-to-light map:\n2821176146 2286693663 106119314\n3822234587 2463633329 180779736\n1725724347 2842879211 104224606\n3308097155 4172728180 122239116\n3299768179 2834550235 8328976\n525232540 357109336 38255672\n751267412 803626289 867213460\n2181067610 2392812977 70820352\n2251887962 2644413065 134698828\n3430336271 3994876090 163182805\n357109336 395365008 62712446\n3646455511 2158365540 128328123\n3084834769 2947103817 214933410\n1618480872 3954660777 40215313\n1673365470 751267412 52358877\n2927295460 3797121468 157539309\n2386586790 1723776184 434589356\n3774783634 2779111893 47450953\n4003014323 3162037227 291952973\n419821782 458077454 105410758\n3593519076 1670839749 52936435\n1658696185 4158058895 14669285\n2173080221 2826562846 7987389\n1829948953 3453990200 343131268\n\nlight-to-temperature map:\n457330729 4090205185 204762111\n2982196520 3401667644 30193953\n2238727594 3778270640 263367024\n2540710222 1921368253 380651678\n2224576409 4041637664 14151185\n1803946096 1170025919 125923944\n947791690 3069412788 65888847\n3354708582 3597834895 180435745\n1173448701 516297801 630497395\n4079424710 2899828022 88028778\n1929870040 1295949863 294706369\n928458849 495946333 19332841\n3145865299 515279174 1018627\n3071616223 2825578946 74249076\n3012390473 3431861597 52676537\n0 156654134 174053721\n1013680537 1590656232 159768164\n2502094618 457330729 38615604\n4167453488 3484538134 113296761\n4058703342 3048691420 20721368\n3146883926 1750424396 164394644\n662092840 3135301635 266366009\n174053721 0 156654134\n4280750249 4055788849 14217047\n3311278570 1146795196 23230723\n3334509293 4070005896 20199289\n3535144327 2302019931 523559015\n3065067010 1914819040 6549213\n2921361900 2987856800 60834620\n\ntemperature-to-humidity map:\n19014508 1616728169 261978440\n479364011 879054632 183139707\n3422279791 4197415651 97551645\n2947838505 2859883311 474441286\n3922771609 3441941550 130194267\n1538347549 1285663854 77335299\n4074125861 3334324597 17231539\n2692139672 3923798143 165313419\n3867887507 3572135817 45827004\n4091357400 2695950683 148956394\n280992948 874337342 4717290\n3585981058 4137845928 59569723\n1194193608 267159640 344153941\n3645550781 2226309992 39998882\n2606341883 3617962821 85797789\n2452453972 3769910232 153887911\n4279991062 2844907077 14976234\n4240313794 4089111562 39677268\n285710238 0 193653773\n662503718 1585706204 31021965\n4052965876 2266308874 21159985\n2226309992 2287468859 226143980\n0 248145132 19014508\n3685549663 2513612839 182337844\n2857453091 3351556136 90385414\n1139702249 193653773 54491359\n3913714511 4128788830 9057098\n916232734 1062194339 223469515\n1615682848 611313581 263023761\n693525683 1362999153 222707051\n3519831436 3703760610 66149622\n\nhumidity-to-location map:\n3722067319 3568864729 46052123\n761939125 1263883488 182519766\n3952597071 3400791743 168072986\n1928058 204065059 218803536\n1797120632 863951513 248903371\n3409129274 3614916852 109595510\n0 1261955430 1928058\n3854871689 2940386871 97725382\n3518724784 3898809601 159455982\n220731594 1446403254 100124613\n944458891 1813379640 207908225\n3194065032 4058265583 117770911\n3059317673 3222157831 134747359\n3678180766 3356905190 43886553\n3375153977 3124864500 33975297\n2940386871 4176036494 118930802\n1152367116 2021287865 24736138\n3311835943 3158839797 63318034\n320856207 422868595 441082918\n1593055573 0 204065059\n4120670057 3724512362 174297239\n1177103254 1112854884 149100546\n1326203800 1546527867 266851773\n3768119442 3038112253 86752247\n"
}

module TestImpl = Impl<testInput/0>;

module RealImpl = Impl<realInput/0>;

select RealImpl::minLocation(), RealImpl::minLocationP2()
